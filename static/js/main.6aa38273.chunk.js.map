{"version":3,"sources":["components/Location.js","components/ForecastResult.js","components/WeatherForecast.js","App.js","serviceWorker.js","index.js"],"names":["Location","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","onSubmit","props","getWeather","htmlFor","type","name","id","Component","ForecastResult","state","scale","handleChange","e","day","target","_this","getDay","handleCelcius","temperature","weatherInfo","weatherTemp","innerHTML","handleFarenheit","root","ReactDOM","findDOMNode","querySelector","_this$props$weatherIn","city","humidity","description","icon","className","onChange","concat","onClick","src","alt","appid","WeatherForecast","call","getTodayWeather","preventDefault","elements","isGetCurrentPosition","currentPosition","checked","url","getCurrentPosition","setState","lat","long","getTodayWeatherData","alert","_ref","asyncToGenerator","regenerator_default","mark","_callee","api_call","response","wrap","_context","prev","next","fetch","sent","json","todayData","Math","round","main","temp","weather","stop","_x","getDaysWeatherData","_ref2","_callee2","wantedDay","wantedDayData","_context2","list","slice","_x2","navigator","geolocation","getLocation","console","log","position","coords","latitude","longitude","getWeatherByDays","_ref3","_callee3","_context3","abrupt","_x3","components_Location","components_ForecastResult","App","components_WeatherForecast","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6aa38273.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport class Location extends Component {\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.props.getWeather}>\r\n        <label htmlFor=\"city\">Enter the city: </label>\r\n        <input type=\"text\" name=\"city\" id=\"city\" />\r\n        &nbsp; or &nbsp;\r\n        <input type=\"checkbox\" name=\"currentPosition\" id=\"current-position\" />\r\n        <label htmlFor=\"current-position\">Choose current position</label>\r\n        <button type=\"submit\">Get weather</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Location;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass ForecastResult extends Component {\r\n  state = {\r\n    scale: \"celcius\"\r\n  };\r\n\r\n  handleChange = e => {\r\n    const day = e.target.value;\r\n    this.props.getDay(day);\r\n  };\r\n\r\n  handleCelcius = () => {\r\n    const temperature = this.props.weatherInfo.temperature + \"°C\";\r\n    this.weatherTemp.innerHTML = temperature;\r\n  };\r\n\r\n  handleFarenheit = () => {\r\n    const temperature = this.props.weatherInfo.temperature * 1.8 + 32 + \"°F\";\r\n    this.weatherTemp.innerHTML = temperature;\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.root = ReactDOM.findDOMNode(this);\r\n    this.weatherTemp = this.root.querySelector(\".weather__temp\");\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      temperature,\r\n      city,\r\n      humidity,\r\n      description,\r\n      icon\r\n    } = this.props.weatherInfo;\r\n    return (\r\n      <div className=\"weather-info\">\r\n        <form className=\"info__header\">\r\n          <select name=\"day\" onChange={this.handleChange}>\r\n            <option value=\"0\">Today</option>\r\n            <option value=\"1\">Next 1 day</option>\r\n            <option value=\"2\">Next 2 day</option>\r\n            <option value=\"3\">Next 3 day</option>\r\n            <option value=\"4\">Next 4 day</option>\r\n          </select>\r\n          <div>\r\n            <span\r\n              className={`scale ${\r\n                this.state.scale === \"farenheit\" ? \"active\" : \"\"\r\n              }`}\r\n              onClick={this.handleFarenheit}\r\n            >\r\n              °F\r\n            </span>\r\n            <span\r\n              className={`scale ${\r\n                this.state.scale === \"celcius\" ? \"active\" : \"\"\r\n              }`}\r\n              onClick={this.handleCelcius}\r\n            >\r\n              °C\r\n            </span>\r\n          </div>\r\n        </form>\r\n        <div className=\"info__content\">\r\n          <div className=\"weather__city\">{city}</div>\r\n          <div className=\"weather__temp\">{temperature}°C</div>\r\n          <div className=\"weather__icon\">\r\n            {icon && (\r\n              <img\r\n                src={`http://openweathermap.org/img/w/${icon}.png`}\r\n                alt=\"icon\"\r\n              />\r\n            )}\r\n          </div>\r\n          <div className=\"weather__humidity\">{humidity}</div>\r\n          <div className=\"weather__desc\">{description}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ForecastResult;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Location from \"./Location.js\";\r\nimport ForecastResult from \"./ForecastResult.js\";\r\nimport \"./style.css\";\r\n\r\nconst appid = \"8a548118fb12d8549d52d4d6887f9937\";\r\n\r\nexport class WeatherForecast extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.url = \"\";\r\n    this.state = {\r\n      temperature: \"\",\r\n      city: \"\",\r\n      humidity: \"\",\r\n      description: \"\",\r\n      day: \"\",\r\n      lat: \"\",\r\n      long: \"\"\r\n    };\r\n  }\r\n\r\n  getTodayWeather = e => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const isGetCurrentPosition = e.target.elements.currentPosition.checked;\r\n    if (!city && !isGetCurrentPosition) {\r\n      alert(\"Please enter your city or choose your current location\");\r\n      return;\r\n    }\r\n    this.url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${appid}&units=metric`;\r\n    if (isGetCurrentPosition) {\r\n      this.getCurrentPosition();\r\n    } else {\r\n      // Set lại lat long về 0 để tránh trường hợp choose current position rồi bỏ đi thì nó vẫn lưu giá trị.\r\n      this.setState({\r\n        lat: \"\",\r\n        long: \"\"\r\n      });\r\n      this.getTodayWeatherData(this.url);\r\n    }\r\n  };\r\n\r\n  getTodayWeatherData = async url => {\r\n    const api_call = await fetch(url);\r\n    const response = await api_call.json();\r\n    if (response) {\r\n      this.todayData = {\r\n        temperature: Math.round(response.main.temp),\r\n        city: response.name,\r\n        humidity: response.main.humidity,\r\n        description: response.weather[0].description,\r\n        icon: response.weather[0].icon\r\n      };\r\n      this.setState(this.todayData);\r\n    }\r\n  };\r\n\r\n  getDaysWeatherData = async url => {\r\n    const api_call = await fetch(url);\r\n    const response = await api_call.json();\r\n    if (response) {\r\n      const wantedDay = response.list.slice(-1)[0];\r\n      const wantedDayData = {\r\n        temperature: Math.round(wantedDay.temp.day),\r\n        city: response.city.name,\r\n        humidity: wantedDay.humidity,\r\n        description: wantedDay.weather[0].description,\r\n        icon: wantedDay.weather[0].icon\r\n      };\r\n      this.setState(wantedDayData);\r\n    }\r\n  };\r\n\r\n  getCurrentPosition = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(this.getLocation);\r\n    } else {\r\n      console.log(\"Geolocation is not supported\");\r\n    }\r\n  };\r\n\r\n  getLocation = position => {\r\n    const lat = position.coords.latitude;\r\n    const long = position.coords.longitude;\r\n    this.setState({\r\n      lat,\r\n      long\r\n    });\r\n    this.url = `http://api.openweathermap.org/data/2.5/weather?&appid=${appid}&lat=${lat}&lon=${long}&units=metric`;\r\n    this.getTodayWeatherData(this.url);\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    this.root = ReactDOM.findDOMNode(this);\r\n    this.city = this.root.querySelector(\"#city\").value;\r\n  }\r\n\r\n  getWeatherByDays = async day => {\r\n    const city = this.city;\r\n    this.url = `http://api.openweathermap.org/data/2.5/forecast/daily?q=${city}&appid=${appid}&units=metric&cnt=${day}`;\r\n    if (this.state.lat && this.state.long) {\r\n      this.url = `http://api.openweathermap.org/data/2.5/forecast/daily?lat=${\r\n        this.state.lat\r\n      }&lon=${this.state.long}&appid=${appid}&units=metric&cnt=${day}`;\r\n    }\r\n    // Nếu là ngày hôm nay thì trả lại dữ liệu đã lấy trước đó.\r\n    if (day === \"0\") {\r\n      this.setState(this.todayData);\r\n      return;\r\n    }\r\n    this.getDaysWeatherData(this.url);\r\n  };\r\n\r\n  render() {\r\n    const weatherInfo = {\r\n      temperature: this.state.temperature,\r\n      city: this.state.city,\r\n      humidity: this.state.humidity,\r\n      description: this.state.description,\r\n      icon: this.state.icon\r\n    };\r\n    return (\r\n      <div>\r\n        <Location getWeather={this.getTodayWeather} />\r\n        {weatherInfo.temperature && (\r\n          <ForecastResult\r\n            weatherInfo={weatherInfo}\r\n            getDay={this.getWeatherByDays}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherForecast;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport WeatherForecast from \"./components/WeatherForecast.js\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <h1>This is demo weather forecast</h1>\r\n        </header>\r\n        <WeatherForecast />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}